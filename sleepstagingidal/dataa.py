# AUTOGENERATED! DO NOT EDIT! File to edit: ../Notebooks/01_sanity_checking.ipynb.

# %% auto 0
__all__ = ['map_events', 'get_sleep_stages']

# %% ../Notebooks/01_sanity_checking.ipynb 7
import os
from glob import glob
from collections import Counter
from typing import List, Dict

from rich.progress import track
import numpy as np
import pandas as pd
import mne
import yasa

from .data import *

# %% ../Notebooks/01_sanity_checking.ipynb 13
def swap_dict(dictionary: Dict # dictionary to be swapped,
              ) -> Dict: # Swapped dictionary
    """Turns the keys into values and the values into keys."""
    return {value:key for key, value in dictionary.items()}

# %% ../Notebooks/01_sanity_checking.ipynb 15
def map_events(events, # events array obtained from `mne.events_from_annotations()`.
               mapping: Dict, # dictionary mapping from encoded annotations to readable.
               ) -> List[str]: # mapped events in human readable format.
    """Turns an encoded representation of the annotations into a human readable one using the corresponding mapping dictionary"""
    mapped_events = [mapping[event] for event in events[:,-1]]
    return mapped_events

# %% ../Notebooks/01_sanity_checking.ipynb 18
def get_sleep_stages(path: str, # Path to an `.edf` file.
                     verbose: bool = False, # Amount of information shown when loading the file.
                     ) -> List[str]: # annotations in human readable form.
    """Loads an `.edf` file and extracts the sleep stage labels in human readable form."""
    raw = mne.io.read_raw_edf(path, preload=False, verbose=verbose)
    events, events_id = mne.events_from_annotations(raw, regexp='Sleep stage [A-Z]\d*', verbose=verbose)
    return map_events(events, swap_dict(events_id))
